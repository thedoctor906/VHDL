library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

entity debounce is
    port(
        CLK, CLR: in std_logic;
        btnU: in std_logic;      
        db_level, 
        db_tick1: out std_logic
        );
end debounce;

architecture debounce_arch of debounce is
 constant N: integer := 21; -- filter of 2^N * 20 ns = 40 ms 
  type state_type is (zero, wait0, one, wait1);
  signal state_reg, state_next: state_type;
  signal q_reg, q_next: unsigned(N-1 downto 8);
  
begin
   process(CLK,CLR)
   begin
       if CLR='1' then
          state_reg <= zero;
          q_reg <= (others=>'0');
      elsif (CLK'event and CLK ='1') then
          state_reg <= state_next;
          q_reg <= q_next;
      end if;
   end process;
   
   -- next-state logic and data path functional units/routing 
   process(state_reg,q_reg,btnU,q_next)
   begin
       state_next <= state_reg;
       q_next <= q_reg;
       db_tick1 <= '0';
       case state_reg is
           when zero =>
               db_level <= '0';
               if (btnU='1') then
                  state_next <= wait1;
                  q_next <= (others=>'1');
               end if;
           when wait1=>
               db_level <= '0';
               if (btnU='1') then
                   q_next <= q_reg - 1;
                   if (q_next=0) then
                       state_next <= one;
                       db_tick1 <= '1';
                   end if;
               else 
                   state_next <= zero;
               end if;
          when one =>
            db_level <= '1';
            if (btnU='0')then
               state_next <= wait0;
               q_next <= (others=>'1');
            end if;
         when wait0=> 
            db_level <= '1';
            if (btnU='0') then
               q_next <= q_reg - 1;
               if (q_next=0) then
               state_next <= zero;
            end if;
         else 
            state_next <= one;
           end if;
end case;
end process;

end debounce_arch;
